***********************************************************************************
Pre-Deployment Steps
***********************************************************************************
1. Review and update the terraform.tfvars file with required variables.
2. Ensure AWS credentials are configured (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_DEFAULT_REGION).
3. Install Terraform (>= 1.0) and AWS CLI.
4. Initialize Terraform: terraform init.

**************************************************************************************
Backend Configuration
***************************************************************************************
This configuration specifies:


- backend: S3 backend for storing Terraform state.
- bucket: S3 bucket name for storing Terraform state.
- key: Path to Terraform state file.
- region: AWS region where S3 bucket is located.
- encrypt: Enable state file encryption.
- dynamodb_table: DynamoDB table name for state locking.


Before using this backend configuration:


1. Create an S3 bucket (e.g., my-terraform-state-bucket).
2. Create a DynamoDB table (e.g., my-terraform-lock-table).
3. Update the bucket, key, region, and dynamodb_table values.


To initialize the backend:
*******************************************************************************
terraform init
*******************************************************************************
terraform init

This command will configure Terraform to use the specified S3 backend.

Security Considerations:

- Ensure the S3 bucket is properly secured (e.g., encrypted, access-controlled).
- Use IAM policies to restrict access to the DynamoDB table.
- Regularly review and rotate access keys.

Best Practices:

- Use versioning on the S3 bucket to track state changes.
- Enable object locking on the S3 bucket for additional security.
- Monitor DynamoDB table metrics for performance and errors.

Overview
terraform init is the first command to run when working with Terraform. It initializes the Terraform working directory and prepares it for other Terraform commands.

Options

| Option | Description |
| --- | --- |
| -backend=true | Initialize backend |
| -backend-config=path/to/backend.cfg | Specify backend configuration file |
| -force-copy | Force copy of existing state file |
| -get-plugins | Download and install required plugins |
| -input=true | Prompt for input |
| -lock=true | Lock state file |
| -lock-timeout=duration | Set lock timeout |
| -no-color | Disable color output |
| -upgrade | Upgrade Terraform modules |


Example Usage:

terraform init \
  -backend=true \
  -backend-config=path/to/backend.cfg \
  -get-plugins \
  -input=true \
  -lock=true \
  -lock-timeout=10m

Expected Output:

Initializing the backend...

Successfully configured the backend "s3"! Terraform will automatically
use this backend unless the backend configuration changes.


You may now begin working with Terraform. Try running "terraform plan" to
see any changes that are required for your infrastructure.


If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget,
other commands will detect it and remind you to do so if necessary.


If you are using Terraform in a CI/CD pipeline, consider setting the
- input=false option to avoid interactive prompts.

Troubleshooting


- Check Terraform version: terraform version
- Verify backend configuration: terraform init -backend-config=path/to/backend.cfg
- Resolve plugin download issues: terraform init -get-plugins
- Handle state locking issues: terraform init -lock=false

Best Practices

- Run terraform init before other Terraform commands
- Use -backend=true to enable backend initialization
- Specify -backend-config=path/to/backend.cfg for custom backend configuration
- Use -get-plugins to download required plugins
- Set -lock=true for state locking
- Set -lock-timeout=duration for custom lock timeout

Terraform Plan

Overview


terraform plan generates an execution plan for Terraform configuration. It shows the changes required to reach the desired state.


Syntax

terraform plan [options]

Options


| Option | Description |
| --- | --- |
| -detailed-exitcode | Return detailed exit code |
| -input=true | Prompt for input |
| -lock=true | Lock state file |
| -lock-timeout=duration | Set lock timeout |
| -no-color | Disable color output |
| -out=path/to/plan.file | Save plan to file |
| -parallelism=n | Set parallelism |
| -refresh=true | Refresh state |
| -state=path/to/state.file | Specify state file |
| -target=resource | Target specific resource |
| -var='variable=value' | Set variable |


Example Usage

terraform plan \
  -out=plan.out \
  -refresh=true \
  -target=aws_eks_cluster.example

Expected Output

Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create
  - destroy
  ~ update in-place


Terraform will perform the following actions:


  # aws_eks_cluster.example will be created
  + resource "aws_eks_cluster" "example" {
      + arn                       = (known after apply)
      + certificate_authority     = (known after apply)
      + created_at               = (known after apply)
      + endpoint                  = (known after apply)
      + id                        = (known after apply)
      + name                      = "example-eks-cluster"
      + role_arn                  = (known after apply)
      + version                   = "1.28"
    }


Plan: 1 to add, 0 to change, 0 to destroy.

Note: Please make sure to check what are the changes happening
##############################################################################################################################
Terraform apply
##############################################################################################################################

Overview

terraform apply executes the actions proposed in the Terraform plan.

Syntax

terraform apply [options]

Options


| Option | Description |
| --- | --- |
| -auto-approve | Auto-approve apply |
| -compact-warnings | Compact warnings |
| -detailed-exitcode | Detailed exit code |
| -input=true | Prompt for input |
| -lock=true | Lock state file |
| -lock-timeout=duration | Set lock timeout |
| -no-color | Disable color output |
| -parallelism=n | Set parallelism |
| -refresh=true | Refresh state |
| -state=path/to/state.file | Specify state file |
| -target=resource | Target specific resource |
| -var='variable=value' | Set variable |


Example Usage

terraform apply \
  -auto-approve \
  -refresh=true \
  -target=aws_eks_cluster.example

Expected Output

Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create
  - destroy
  ~ update in-place


Terraform will perform the following actions:


  # aws_eks_cluster.example will be created
  + resource "aws_eks_cluster" "example" {
      + arn                       = (known after apply)
      + certificate_authority     = (known after apply)
      + created_at               = (known after apply)
      + endpoint                  = (known after apply)
      + id                        = (known after apply)
      + name                      = "example-eks-cluster"
      + role_arn                  = (known after apply)
      + version                   = "1.28"
    }


Plan: 1 to add, 0 to change, 0 to destroy.


Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.


  Enter a value: yes


------------------------------------------------------------------------


Apply complete! Resources: 1 added, 0 changed, 0 destroyed.


Outputs:


cluster_name = "example-eks-cluster"

########################################################################################################################

1. Terraform init
2. Plan Terraform: terraform plan.
3. Review the plan output to ensure accuracy.
4. Apply Terraform: terraform apply.
5. Verify deployment: terraform output.


Post-Deployment Steps


1. Verify EKS cluster status: aws eks describe-cluster --name <eks_cluster_name>.
2. Update Kubernetes configuration: aws eks update-kubeconfig --name <eks_cluster_name>.
3. Test Kubernetes deployment.


Ongoing Maintenance


1. Regularly update Terraform configuration to reflect infrastructure changes.
2. Monitor EKS cluster and node group status.
3. Perform routine security audits and compliance checks.


Upgrade/Downgrade Steps


1. Update kubernetes_version variable in terraform.tfvars.
2. Run terraform plan and review output.
3. Run terraform apply to apply changes.


Troubleshooting Steps


1. Check Terraform logs: terraform logs.
2. Verify AWS credentials: aws sts get-caller-identity.
3. Check EKS cluster status: aws eks describe-cluster --name <eks_cluster_name>.


Best Practices


1. Use version control (e.g., Git) to track Terraform configuration changes.
2. Use environment variables for sensitive data (e.g., AWS_ACCESS_KEY_ID).
3. Regularly backup Terraform state files.
4. Use Terraform workspaces for multiple environments (e.g., dev, prod).
